@page "/role-management"
@using Ardalis.GuardClauses
@using COH.UI.Components.Account
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleUserManager RoleUserManager

@rendermode InteractiveServer
<h3>Role Management</h3>

<button @onclick="CreateNewRole">Create New Role</button>
<button @onclick="AssignRoleToUser">Assign Role to User</button>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private async Task CreateNewRole()
    {
        try
        {
            await RoleUserManager.CreateRoleAsync("Admin");
            Console.WriteLine("Role created successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    /// <summary>
    /// Currently assigns admin role to logged in user
    /// </summary>
    /// <returns></returns>
    private async Task AssignRoleToUser()
    {
        try
        {
            await Guard.Against.Null(authenticationStateTask);
            var user = (await authenticationStateTask).User;

            var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            Guard.Against.Null(userid);
            string userId = userid;
            await RoleUserManager.AssignRoleToUserAsync(userId, "Admin");
            Console.WriteLine("Role assigned to user successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
